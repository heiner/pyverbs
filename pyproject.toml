[build-system]
requires = [
    "scikit-build-core>=0.10",
    "cython>=3.0.12",
]
build-backend = "scikit_build_core.build"

[project]
name = "pyverbs"
version = "56.0"
requires-python = ">= 3.10"

[tool.scikit-build]
cmake.build-type = "Release"
minimum-version = "build-system.requires"
wheel.license-files = [
    "rdma-core/COPYING.BSD_FB",
    "rdma-core/COPYING.BSD_MIT",
    "rdma-core/COPYING.GPL2",
    "rdma-core/COPYING.md",
]
cmake.source-dir = "rdma-core"
cmake.args = [
    "-DNO_MAN_PAGES=1",
    "-DNO_PYVERBS=0",
    "-DCMAKE_INSTALL_PYTHON_ARCH_LIB=."
]
wheel.exclude = [
    "bin/*",
    "etc/*",
    "include/*",
    "lib/*",
    "libexec/*",
    "sbin/*",
    "share/*",
]
wheel.packages = ["pyverbs"]

[tool.cibuildwheel]
# We need to build wheels for the following Python versions:
build = "cp{38,39,310,311,312}-*"

[tool.cibuildwheel.linux]
# Only manylinux is supported (no musllinux)
build = "cp{38,39,310,311,312}-manylinux*"

# We need to clean up the build directory, all .so files, and CMakeCache.txt
# and install the dependencies using yum, as manylinux2014 image is CentOS 7-based
# "rdma-core libibverbs librdmacm libibumad infiniband-diags" is here because the repair step loads the .so in the wheel.
before-all = "rm -rf {project}/build {project}/*.so {project}/CMakeCache.txt && yum install -y cmake3 ninja-build gcc libnl3-devel libudev-devel pkgconfig valgrind-devel rdma-core libibverbs librdmacm libibumad infiniband-diags"

# Build for the architecure of the runner in the GitHub Actions workflow:
# ubuntu-20.04 -> x86_64
# ubuntu-24.04-arm -> aarch64
archs = "native"

# Use manylinux2014 image for both x86_64 and aarch64
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
